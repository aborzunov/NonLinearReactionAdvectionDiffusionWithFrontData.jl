using NonLinearReactionAdvectionDiffusionWithFrontData
using NonLinearReactionAdvectionDiffusionWithFrontData: f_y, ∂f_∂y, directRP, ∂directRP_∂y;
using BenchmarkTools
using LinearAlgebra


u_l(t) = -8 + 4*sin(2*π / T * t);# Прямая задача может быть с неоднородными ГУ
u_r(t) =  4 + sin(-2*π / T * t);# Но в дальнейшем, будем использовать только однородные.
q(x) = 4*sin(3 * π * x);        # Коэффициент линейного усиления, который в обратной
                                # задаче необходимо определить, но при генерации априорной
                                # информации мы задаем некоторый коэффициент, который,
                                # собственно, после имея априорную информацию и будем определять.
ε = 0.2;                        # Малый параметр при старшей производной
a, b = 0, 1;                    # Область по X
t₀, T = 0, 0.28;                # Область по T
N, M = 50, 80;                  # Кол-во разбиений по X, T
h = (b-a)/N;                    # шаг по X
τ = (T-t₀)/M;                   # шаг по T
Xₙ = [a  + n*h for n in 0:N];   # Сетка по Х
Tₘ = [t₀ + m*τ for m in 0:M];   # Сетка по Т
qₙ =      q.(Xₙ);               # Сеточные значения коэффициента линейного усиления
ulₘ=    u_l.(Tₘ);               # Сеточные значения левого  ГУ
urₘ=    u_r.(Tₘ);               # Сеточные значения правого ГУ
y₀ = u_init.(Xₙ);               # Начальные условия
nothing #hide

# Подготовим массивы, выбросив граничные точки
# ведь тестируемая функция — для внутреннего использования
X = Xₙ[2:N];
qq = qₙ[2:N];
y = u₀[2:N];

dl, d, du = f_y(y, 1, X, N, ε, ulₘ, urₘ, qq)

b = @benchmark f_y($y, 1, $X, $N, $ε, $ulₘ, $urₘ, $qq);
@info "Сформировать 3 вектора диагоналей якобиана:" b

b = @benchmark Tridiagonal( f_y($y, 1, $X, $N, $ε, $ulₘ, $urₘ, $qq)... );
@info "Обертка `f_y` в `Tridiagonal()`:" b

b = @benchmark Tridiagonal( $dl, $d, $du );
@info "Конструктор Tridiagonal из трех постоянных векторов:" b

b = @benchmark ∂directRP_∂y($y, 1, $X, $N, $ε, $ulₘ, $urₘ, $qq);
@info "Якобиан с помощью автоматического дифференциарования:" b

b = @benchmark solve($u₀, $Xₙ, $N, $Tₘ, $M, $ε, $ulₘ, $urₘ, $qₙ, $directRP, $∂f_∂y);
@info "Решение прямой задачи с трехдиагональным якобианом" b

b = @benchmark solve($u₀, $Xₙ, $N, $Tₘ, $M, $ε, $ulₘ, $urₘ, $qₙ);
@info "Решение прямой задачи с якобианом афтодифференцирования" b
